{"version":3,"sources":["components/HandlerButton/HandlerButton.tsx","components/Notification/Notifications.tsx","store/index.ts","helpers/localStorageHelper.ts","helpers/dateHelper.ts","helpers/FormHelper.ts","components/Button/Button.tsx","components/ItemAddingForm/ItemAddingForm.tsx","components/AddEvent/AddEvent.tsx","helpers/EventItemHelper.ts","components/ItemEditiingForm/ItemEditingForm.tsx","components/ItemEditing/ItemEditing.tsx","components/EventItem/EventItem.tsx","components/EventsList/EventsList.tsx","components/SelectDate/SelectDate.tsx","App.tsx","index.tsx"],"names":["HandlerButton","React","memo","handler","title","whiteBackground","buttonClose","buttonEdit","className","classNames","onClick","Notification","text","errorStatus","successStatus","myEventStore","events","localStorage","getItem","JSON","parse","getEventsFromLocalStorage","selectedData","eventsDates","this","defineEventsDates","makeAutoObservable","autorun","updateLocalStorageData","newEventsList","eventsList","validData","stringify","setItem","setEventsInLocalStorage","newSelectedData","event","updateEventsDates","id","filter","changedEvent","eventIndex","findIndex","oldEvent","date","requiredDate","sort","prev","next","localeCompare","dates","Set","map","Array","from","values","startTime","endTime","eventsByAnyDate","some","getValidDateFormat","format","moment","locale","getDateForDisplay","value","getHtmlDateFormat","getTodayDate","currentDate","Date","getFullYear","getMonth","getDate","createTodayWorkingDate","getHours","maxEndTime","getMonthForDisplay","split","getYearForDisplay","reverse","join","getValidMinutes","currentMinStartTime","minStartMinutes","validate","errors","checkDate","generateDateError","checkStartTime","generateStartTimeError","checkMaxStartTime","generateMaxStartTimeError","isEndLessThenStart","generateEndTimeLessError","isEndEqualStart","generateEndTimeEqualError","checkEndTime","generateMaxEndTimeError","validateAddingItemForm","length","validateEditingItemForm","setHours","todayDate","getTime","todayWorkingDate","setMinutes","Math","ceil","roundMinutes","getMinutes","hours","parseInt","minutes","slice","startHours","startMinutes","endHours","endMinutes","Button","disabled","type","ItemAddingForm","observer","setAddingError","setAddingSuccess","clearSuccess","useCallback","handleSubmit","resetForm","newEvent","uuidv4","defineIsTimeFree","addEvent","initialValues","onSubmit","touched","isValid","dirty","htmlFor","name","placeholder","component","AddEvent","useState","formStatus","setFormStatus","addingError","addingSuccess","handleFormStatus","prevState","makeCapitalFirstLetter","firstPart","toUpperCase","secondPart","ItemEditingForm","handleStatusEditing","errorMessage","successEditing","eventTitle","ItemEditing","setErrorMessage","setSuccessEditing","useMemo","identityChecking","isTimeFree","changeEvent","EventItem","editingStatus","setStatusEditing","onDeleteEvent","deleteEvent","dateTime","EventsList","getSelectedData","SelectDate","setSelectedData","target","onChange","getEventsDatesList","eventDate","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef2bf3e4.chunk.js","sourcesContent":["import React, { MouseEventHandler } from 'react';\nimport classNames from 'classnames';\n\nimport './HandlerButton.scss';\n\ninterface Props {\n  handler: MouseEventHandler<HTMLButtonElement>;\n  title: string;\n  whiteBackground?: boolean;\n  buttonClose?: boolean;\n  buttonEdit?: boolean;\n}\n\nexport const HandlerButton = React.memo(\n  ({\n    handler,\n    title,\n    whiteBackground = false,\n    buttonClose = false,\n    buttonEdit = false,\n  }: Props) => {\n    return (\n      <button\n        className={classNames('HandlerButton', {\n          'HandlerButton--white': whiteBackground,\n          'HandlerButton--close': buttonClose,\n          'HandlerButton--edit': buttonEdit,\n        })}\n        title={title}\n        onClick={handler}\n      />\n    );\n  }\n);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './Notification.scss';\n\ninterface Props {\n  text: string;\n  errorStatus?: boolean;\n  successStatus?: boolean;\n}\n\nexport const Notification = React.memo(\n  ({ text, errorStatus = false, successStatus = false }: Props) => {\n    return (\n      <h3\n        className={classNames('Notification', {\n          'Notification--error': errorStatus,\n          'Notification--success': successStatus,\n        })}\n      >\n        {text}\n      </h3>\n    );\n  }\n);\n","import { makeAutoObservable, autorun } from 'mobx';\n\nimport { EventInterface } from '../types';\n\nimport {\n  getEventsFromLocalStorage,\n  setEventsInLocalStorage,\n} from '../helpers/localStorageHelper';\n\nclass EventStore {\n  events: EventInterface[] = getEventsFromLocalStorage();\n  selectedData: string = '';\n  eventsDates: string[] = this.defineEventsDates(this.events);\n\n  constructor() {\n    makeAutoObservable(this);\n    autorun(() => this.updateLocalStorageData(this.events));\n  }\n\n  //#region Actions\n  updateLocalStorageData(newEventsList: EventInterface[]) {\n    setEventsInLocalStorage(newEventsList);\n  }\n\n  setSelectedData(newSelectedData: string) {\n    this.selectedData = newSelectedData;\n  }\n\n  addEvent(event: EventInterface) {\n    this.events = [...this.events, event];\n\n    this.updateEventsDates(this.events);\n  }\n\n  deleteEvent(id: string) {\n    this.events = this.events.filter((event) => event.id !== id);\n\n    this.updateEventsDates(this.events);\n  }\n\n  changeEvent(changedEvent: EventInterface) {\n    const eventIndex = this.events.findIndex(\n      (event) => event.id === changedEvent.id\n    );\n    const oldEvent = this.events[eventIndex];\n\n    this.events[eventIndex] = { ...changedEvent };\n\n    if (oldEvent.date !== changedEvent.date) {\n      this.updateEventsDates(this.events, oldEvent.date);\n    }\n  }\n\n  updateEventsDates(newEventsList: EventInterface[], requiredDate?: string) {\n    this.eventsDates = requiredDate\n      ? [...this.defineEventsDates(newEventsList), requiredDate]\n      : this.defineEventsDates(newEventsList);\n\n    this.eventsDates.sort((prev, next) => prev.localeCompare(next));\n  }\n\n  defineEventsDates(eventsList: EventInterface[]): string[] {\n    const dates = new Set(eventsList.map((event) => event.date));\n\n    return Array.from(dates.values());\n  }\n\n  eventsByAnyDate(date: string): EventInterface[] {\n    return this.events\n      .filter((event) => event.date === date)\n      .sort((prev, next) => prev.startTime.localeCompare(next.startTime));\n  }\n\n  defineIsTimeFree(\n    date: string,\n    startTime: string,\n    endTime: string,\n    id: string = ''\n  ): boolean {\n    const events = this.eventsByAnyDate(date);\n\n    return !events.some((event: EventInterface) => {\n      if (id === event.id) {\n        return false;\n      }\n\n      return (\n        (startTime >= event.startTime && startTime < event.endTime) ||\n        (endTime > event.startTime && endTime <= event.endTime)\n      );\n    });\n  }\n  //#endregion\n\n  //#region Computed values (derivations)\n  get getEvents(): EventInterface[] {\n    return this.events;\n  }\n\n  get getEventsDatesList(): string[] {\n    return this.eventsDates;\n  }\n\n  get getSelectedData(): string {\n    return this.selectedData;\n  }\n  //#endregion\n}\n\nconst myEventStore = new EventStore();\n\nexport default myEventStore;\n","import { EventInterface } from '../types';\n\nexport const getEventsFromLocalStorage = (): EventInterface[] => {\n  const events = localStorage.getItem('events') || '[]';\n\n  return JSON.parse(events);\n};\n\nexport const setEventsInLocalStorage = (eventsList: EventInterface[]) => {\n  const validData = JSON.stringify(eventsList);\n\n  localStorage.setItem('events', validData);\n};\n","import moment from 'moment';\nimport 'moment/locale/ru';\n\nimport { maxEndTime } from './FormHelper';\n\nexport const dateFormat = 'L'; // 12.07.2021\n\nexport const getValidDateFormat = (\n  date: Date | string,\n  format?: string\n): string => {\n  moment.locale('ru');\n\n  const initialDateFormat = moment(date);\n\n  return initialDateFormat.format(format || dateFormat);\n};\n\nconst getDateForDisplay = (value: string): string => {\n  moment.locale('ru');\n\n  const date = getHtmlDateFormat(value);\n\n  return getValidDateFormat(date, 'LL'); // LL ===  14 июля 2021 г.\n};\n\nexport const getTodayDate = (): Date => {\n  const currentDate = new Date();\n\n  return new Date(\n    currentDate.getFullYear(),\n    currentDate.getMonth(),\n    currentDate.getDate()\n  );\n};\n\nexport const createTodayWorkingDate = (): Date => {\n  const currentDate = new Date();\n\n  if (currentDate.getHours() >= maxEndTime) {\n    return new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth(),\n      currentDate.getDate() + 1\n    );\n  }\n\n  return getTodayDate();\n};\n\nexport const getDayForDisplay = (value: string): string =>\n  getDateForDisplay(value).split(' ')[0];\n\nexport const getMonthForDisplay = (value: string): string =>\n  getDateForDisplay(value).split(' ')[1];\n\nexport const getYearForDisplay = (value: string): string =>\n  getDateForDisplay(value).split(' ')[2];\n\nexport const getHtmlDateFormat = (value: string): string =>\n  value.split('.').reverse().join('-'); // Initial format at top of this file\n\nexport const roundMinutes = (value: number): number =>\n  Math.ceil(value / 10) * 10;\n\nexport const getValidMinutes = (value: number): string =>\n  value < 10 ? `0${value}` : `${value}`;\n","import { FormValues } from '../types';\n\nimport {\n  getValidDateFormat,\n  getTodayDate,\n  createTodayWorkingDate,\n  roundMinutes,\n  getValidMinutes,\n} from './dateHelper';\n\nconst minTitleLength = 3;\nconst minStartTime = 9;\nconst maxStartTime = 17;\nconst maxStartMinutes = 30;\nexport const maxEndTime = 18;\nconst safeMinutesGap = 30;\n\nlet currentMinStartTime = minStartTime;\nlet minStartMinutes = 0;\n\nconst validate = (values: FormValues): FormValues => {\n  const errors: FormValues = {};\n\n  //#region DateChecking\n  if (!values.date) {\n    errors.date = 'Обязательно для ввода';\n  } else if (checkDate(values.date)) {\n    errors.date = generateDateError();\n  }\n  //#endregion\n\n  //#region StartTimeChecking\n  if (!values.startTime) {\n    errors.startTime = 'Обязательно для ввода';\n  } else if (checkStartTime(values.startTime)) {\n    errors.startTime = generateStartTimeError();\n  } else if (checkMaxStartTime(values.startTime)) {\n    errors.startTime = generateMaxStartTimeError();\n  }\n  //#endregion\n\n  //#region EndTimeChecking\n  if (!values.endTime) {\n    errors.endTime = 'Обязательно для ввода';\n  } else if (isEndLessThenStart(values.startTime, values.endTime)) {\n    errors.endTime = generateEndTimeLessError();\n  } else if (isEndEqualStart(values.startTime, values.endTime)) {\n    errors.endTime = generateEndTimeEqualError();\n  } else if (checkEndTime(values.endTime)) {\n    errors.endTime = generateMaxEndTimeError();\n  }\n  //#endregion\n\n  return errors;\n};\n\nexport const validateAddingItemForm = (values: FormValues): FormValues => {\n  const errors: FormValues = { ...validate(values) };\n\n  if (!values.title) {\n    errors.title = 'Обязательно для ввода';\n  } else if (values.title.length < minTitleLength) {\n    errors.title = `Минимум ${minTitleLength} символа`;\n  }\n\n  return errors;\n};\n\nexport const validateEditingItemForm = (values: FormValues): FormValues => {\n  const errors: FormValues = { ...validate(values) };\n\n  return errors;\n};\n\n//#region DateValidation\nconst checkDate = (value: string): boolean => {\n  const date = new Date(value).setHours(0);\n  const todayDate = getTodayDate().getTime();\n  const todayWorkingDate = createTodayWorkingDate().getTime();\n\n  if (date === todayDate) {\n    const date = new Date();\n\n    date.setMinutes(roundMinutes(date.getMinutes()) + safeMinutesGap);\n\n    currentMinStartTime = date.getHours();\n    minStartMinutes = date.getMinutes();\n  } else {\n    currentMinStartTime = minStartTime;\n    minStartMinutes = 0;\n  }\n\n  return date < todayWorkingDate;\n};\n\nconst generateDateError = (): string => {\n  const todayWorkingDate = createTodayWorkingDate();\n  const dateFormat = 'LL';\n\n  return `Выберите дату начиная от ${getValidDateFormat(\n    todayWorkingDate,\n    dateFormat\n  )}`;\n};\n//#endregion\n\n//#region StartTimeValidation\nconst checkStartTime = (value: string): boolean => {\n  const hours = parseInt(value);\n  const minutes = parseInt(value.slice(3)); // Input time format - 09:00\n\n  if (hours <= currentMinStartTime) {\n    return hours < currentMinStartTime || minutes < minStartMinutes;\n  }\n\n  return hours < currentMinStartTime;\n};\n\nconst checkMaxStartTime = (value: string): boolean => {\n  const hours = parseInt(value);\n  const minutes = parseInt(value.slice(3)); // Input time format - 09:00\n\n  if (hours > maxStartTime) {\n    return true;\n  }\n\n  if (hours === maxStartTime) {\n    return minutes > maxStartMinutes;\n  }\n\n  return false;\n};\n\nconst generateStartTimeError = (): string =>\n  `Минимальное время начала - ${currentMinStartTime}:${getValidMinutes(\n    minStartMinutes\n  )}`;\n\nconst generateMaxStartTimeError = (): string =>\n  `Максимальное время начала - ${maxStartTime}:${getValidMinutes(\n    maxStartMinutes\n  )}`;\n//#endregion\n\n//#region EndTimeValidation\nconst checkEndTime = (value: string): boolean => {\n  const hours = parseInt(value);\n  const minutes = parseInt(value.slice(3)); // Input time format - 09:00\n\n  if (hours > maxEndTime) {\n    return true;\n  }\n\n  if (hours === maxEndTime && minutes > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nconst generateMaxEndTimeError = (): string =>\n  `Максимальное время завершения - ${maxEndTime}:00`;\n\nconst isEndLessThenStart = (\n  startTime: string = '09:00',\n  endTime: string\n): boolean => {\n  const startHours = parseInt(startTime);\n  const startMinutes = parseInt(startTime.slice(3)); // Input time format - 09:00\n  const endHours = parseInt(endTime);\n  const endMinutes = parseInt(endTime.slice(3)); // Input time format - 09:00\n\n  if (startHours > endHours) {\n    return true;\n  }\n\n  if (startHours === endHours && startMinutes > endMinutes) {\n    return true;\n  }\n\n  return false;\n};\n\nconst generateEndTimeLessError = (): string =>\n  'Время завершения меньше времени начала';\n\nconst isEndEqualStart = (\n  startTime: string = '09:00',\n  endTime: string\n): boolean => {\n  const startHours = parseInt(startTime);\n  const startMinutes = parseInt(startTime.slice(3)); // Input time format - 09:00\n  const endHours = parseInt(endTime);\n  const endMinutes = parseInt(endTime.slice(3)); // Input time format - 09:00\n\n  return startHours === endHours && startMinutes === endMinutes;\n};\n\nconst generateEndTimeEqualError = (): string =>\n  'Время завершения идентично времени начала';\n//#endregion\n","import React, { MouseEventHandler } from 'react';\n\nimport { ButtonType } from '../../types';\n\nimport './Button.scss';\n\ninterface Props {\n  handler?: MouseEventHandler<HTMLButtonElement>;\n  text: string;\n  title: string;\n  disabled?: boolean;\n  type?: ButtonType;\n}\n\nexport const Button = React.memo(\n  ({\n    handler = () => {},\n    text,\n    title,\n    disabled = false,\n    type = 'button',\n  }: Props) => {\n    return (\n      <button\n        className=\"Button\"\n        title={title}\n        disabled={disabled}\n        type={type}\n        onClick={handler}\n      >\n        {text}\n      </button>\n    );\n  }\n);\n","import React, { useCallback } from 'react';\nimport { observer } from 'mobx-react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport classNames from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { EventInterface } from '../../types';\nimport myEventStore from '../../store';\n\nimport { validateAddingItemForm } from '../../helpers/FormHelper';\nimport { getValidDateFormat } from '../../helpers/dateHelper';\n\nimport { Button } from '../Button';\n\nimport './ItemAddingForm.scss';\n\nconst submitText = 'Добавить';\nconst submitTitle = 'Добавить событие';\n\ninterface Props {\n  setAddingError: Function;\n  setAddingSuccess: Function;\n}\n\nexport const ItemAddingForm = observer(\n  ({ setAddingError, setAddingSuccess }: Props) => {\n    const clearSuccess = useCallback(() => {\n      setAddingSuccess(false);\n    }, [setAddingSuccess]);\n\n    const handleSubmit = useCallback(\n      (values, { resetForm }) => {\n        const { title, date, startTime, endTime } = values;\n        const newEvent: EventInterface = {\n          title,\n          startTime,\n          endTime,\n          date: getValidDateFormat(date),\n          id: uuidv4(),\n        };\n\n        const isTimeFree = myEventStore.defineIsTimeFree(\n          newEvent.date,\n          newEvent.startTime,\n          newEvent.endTime\n        );\n\n        if (isTimeFree) {\n          myEventStore.addEvent(newEvent);\n          resetForm();\n          setAddingError(false);\n          setAddingSuccess(true);\n        } else {\n          setAddingError(true);\n          clearSuccess();\n        }\n      },\n      [clearSuccess, setAddingError, setAddingSuccess]\n    );\n\n    return (\n      <Formik\n        initialValues={{ title: '', date: '', startTime: '', endTime: '' }}\n        validate={validateAddingItemForm}\n        onSubmit={handleSubmit}\n      >\n        {({ values, errors, touched, isValid, dirty }) => (\n          <Form className=\"ItemAddingForm\">\n            <div className=\"ItemAddingForm__inputs-wrapper\">\n              <label htmlFor=\"title\" className=\"ItemAddingForm__label\">\n                <h3 className=\"ItemAddingForm__input-title\">Название</h3>\n                <Field\n                  id=\"title\"\n                  type=\"text\"\n                  name=\"title\"\n                  className={classNames('ItemAddingForm__input', {\n                    'ItemAddingForm__input--error':\n                      errors.title && touched.title,\n                    'ItemAddingForm__input--success':\n                      !errors.title && values.title,\n                  })}\n                  placeholder=\"Название события\"\n                  onClick={clearSuccess}\n                />\n                <ErrorMessage\n                  name=\"title\"\n                  component=\"div\"\n                  className=\"ItemAddingForm__error\"\n                />\n              </label>\n\n              <label htmlFor=\"date\" className=\"ItemAddingForm__label\">\n                <h3 className=\"ItemAddingForm__input-title\">Дата</h3>\n                <Field\n                  id=\"date\"\n                  type=\"date\"\n                  name=\"date\"\n                  className={classNames('ItemAddingForm__input', {\n                    'ItemAddingForm__input--error': errors.date && touched.date,\n                    'ItemAddingForm__input--success':\n                      !errors.date && values.date,\n                  })}\n                  onClick={clearSuccess}\n                />\n                <ErrorMessage\n                  name=\"date\"\n                  component=\"div\"\n                  className=\"ItemAddingForm__error\"\n                />\n              </label>\n\n              <label htmlFor=\"startTime\" className=\"ItemAddingForm__label\">\n                <h3 className=\"ItemAddingForm__input-title\">Время начала</h3>\n                <Field\n                  id=\"startTime\"\n                  type=\"time\"\n                  name=\"startTime\"\n                  className={classNames('ItemAddingForm__input', {\n                    'ItemAddingForm__input--error':\n                      errors.startTime && touched.startTime,\n                    'ItemAddingForm__input--success':\n                      !errors.startTime && values.startTime,\n                  })}\n                  onClick={clearSuccess}\n                />\n                <ErrorMessage\n                  name=\"startTime\"\n                  component=\"div\"\n                  className=\"ItemAddingForm__error\"\n                />\n              </label>\n\n              <label htmlFor=\"endTime\" className=\"ItemAddingForm__label\">\n                <h3 className=\"ItemAddingForm__input-title\">\n                  Время завершения\n                </h3>\n                <Field\n                  id=\"endTime\"\n                  type=\"time\"\n                  name=\"endTime\"\n                  className={classNames('ItemAddingForm__input', {\n                    'ItemAddingForm__input--error':\n                      errors.endTime && touched.endTime,\n                    'ItemAddingForm__input--success':\n                      !errors.endTime && values.endTime,\n                  })}\n                  disabled={values.startTime === ''}\n                  onClick={clearSuccess}\n                />\n                <ErrorMessage\n                  name=\"endTime\"\n                  component=\"div\"\n                  className=\"ItemAddingForm__error\"\n                />\n              </label>\n            </div>\n\n            <div className=\"ItemAddingForm__button-wrapper\">\n              <Button\n                text={submitText}\n                title={submitTitle}\n                disabled={!isValid || !dirty}\n                type={'submit'}\n              />\n            </div>\n          </Form>\n        )}\n      </Formik>\n    );\n  }\n);\n","import React, { useCallback, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { HandlerButton } from '../HandlerButton';\nimport { Notification } from '../Notification';\nimport { ItemAddingForm } from '../ItemAddingForm';\nimport { Button } from '../Button';\n\nimport './AddEvent.scss';\n\nconst handlerTitle = 'Закрыть форму добавления события';\nconst errorMessage = 'Ошибка добавления! Уже есть событие на указанное время!';\nconst successMessage = 'Событие успешно добавлено!';\nconst buttonText = 'Добавить событие';\nconst buttonTitle = 'Открыть форму добавления события';\n\nexport const AddEvent = () => {\n  const [formStatus, setFormStatus] = useState(false);\n  const [addingError, setAddingError] = useState(false);\n  const [addingSuccess, setAddingSuccess] = useState(false);\n\n  const handleFormStatus = useCallback(() => {\n    setFormStatus((prevState) => !prevState);\n    setAddingError(false);\n    setAddingSuccess(false);\n  }, []);\n\n  return (\n    <div className=\"AddEvent\">\n      {formStatus ? (\n        <>\n          <header className=\"AddEvent__header\">\n            <h2 className=\"AddEvent__title\">Добавить событие</h2>\n\n            <HandlerButton\n              handler={handleFormStatus}\n              title={handlerTitle}\n              buttonClose={true}\n            />\n          </header>\n\n          <div\n            className={classNames('AddEvent__notification-wrapper', {\n              'AddEvent__notification-wrapper--active':\n                addingError || addingSuccess,\n            })}\n          >\n            {addingError && (\n              <Notification text={errorMessage} errorStatus={true} />\n            )}\n\n            {addingSuccess && (\n              <Notification text={successMessage} successStatus={true} />\n            )}\n          </div>\n\n          <ItemAddingForm\n            setAddingError={setAddingError}\n            setAddingSuccess={setAddingSuccess}\n          />\n        </>\n      ) : (\n        <div className=\"AddEvent__button-wrapper\">\n          <Button\n            handler={handleFormStatus}\n            text={buttonText}\n            title={buttonTitle}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","export const makeCapitalFirstLetter = (value: string): string => {\n  const firstPart = value.slice(0, 1).toUpperCase();\n  const secondPart = value.slice(1);\n\n  return `${firstPart}${secondPart}`;\n};\n","import React, { MouseEventHandler } from 'react';\nimport { Form, Field, ErrorMessage, FormikErrors, FormikTouched } from 'formik';\nimport classNames from 'classnames';\n\nimport { FormValues } from '../../types';\nimport { Notification } from '../Notification';\nimport { HandlerButton } from '../HandlerButton';\nimport { Button } from '../Button';\n\nimport { makeCapitalFirstLetter } from '../../helpers/EventItemHelper';\n\nimport './ItemEditingForm.scss';\n\nconst submitText = 'Изменить';\nconst submitTitle = 'Изменить событие';\nconst handlerCloserTitle = 'Закрыть форму изменения события';\n\ninterface Props {\n  handleStatusEditing: MouseEventHandler<HTMLButtonElement>;\n  errorMessage: string;\n  values: FormValues;\n  errors: FormikErrors<FormValues>;\n  touched: FormikTouched<FormValues>;\n  isValid: boolean;\n  successEditing: boolean;\n  eventTitle: string;\n}\n\nexport const ItemEditingForm = ({\n  handleStatusEditing,\n  errorMessage,\n  values,\n  errors,\n  touched,\n  isValid,\n  successEditing,\n  eventTitle,\n}: Props) => {\n  return (\n    <Form className=\"ItemEditingForm\">\n      <header\n        className={classNames('ItemEditingForm__header', {\n          'ItemEditingForm__header--success': successEditing,\n        })}\n      >\n        <div\n          className={classNames('ItemEditingForm__title', {\n            'ItemEditingForm__title--success': successEditing,\n          })}\n        >\n          {successEditing ? (\n            <Notification\n              text={`Событие \"${makeCapitalFirstLetter(\n                eventTitle\n              )}\" успешно изменено!`}\n              successStatus={true}\n            />\n          ) : (\n            <h3>{makeCapitalFirstLetter(eventTitle)}</h3>\n          )}\n        </div>\n\n        <div className=\"ItemEditingForm__closer-wrapper\">\n          <HandlerButton\n            handler={handleStatusEditing}\n            title={handlerCloserTitle}\n            whiteBackground={true}\n            buttonClose={true}\n          />\n        </div>\n      </header>\n\n      {!successEditing && (\n        <>\n          <div className=\"ItemEditingForm__inputs-wrapper\">\n            <label htmlFor=\"edit-date\" className=\"ItemEditingForm__label\">\n              <h3 className=\"ItemEditingForm__input-title\">Новая дата</h3>\n              <Field\n                id=\"edit-date\"\n                type=\"date\"\n                name=\"date\"\n                className={classNames('ItemEditingForm__input', {\n                  'ItemEditingForm__input--error': errors.date && touched.date,\n                  'ItemEditingForm__input--success':\n                    !errors.date && values.date,\n                })}\n              />\n              <ErrorMessage\n                name=\"date\"\n                component=\"div\"\n                className=\"ItemEditingForm__error\"\n              />\n            </label>\n\n            <label htmlFor=\"edit-startTime\" className=\"ItemEditingForm__label\">\n              <h3 className=\"ItemEditingForm__input-title\">\n                Новое время начала\n              </h3>\n              <Field\n                id=\"edit-startTime\"\n                type=\"time\"\n                name=\"startTime\"\n                className={classNames('ItemEditingForm__input', {\n                  'ItemEditingForm__input--error':\n                    errors.startTime && touched.startTime,\n                  'ItemEditingForm__input--success':\n                    !errors.startTime && values.startTime,\n                })}\n              />\n              <ErrorMessage\n                name=\"startTime\"\n                component=\"div\"\n                className=\"ItemEditingForm__error\"\n              />\n            </label>\n\n            <label htmlFor=\"edit-endTime\" className=\"ItemEditingForm__label\">\n              <h3 className=\"ItemEditingForm__input-title\">\n                Новое время завершения\n              </h3>\n              <Field\n                id=\"edit-endTime\"\n                type=\"time\"\n                name=\"endTime\"\n                className={classNames('ItemEditingForm__input', {\n                  'ItemEditingForm__input--error':\n                    errors.endTime && touched.endTime,\n                  'ItemEditingForm__input--success':\n                    !errors.endTime && values.endTime,\n                })}\n                disabled={values.startTime === ''}\n              />\n              <ErrorMessage\n                name=\"endTime\"\n                component=\"div\"\n                className=\"ItemEditingForm__error\"\n              />\n            </label>\n          </div>\n\n          <div className=\"ItemEditingForm__button-wrapper\">\n            <Button\n              text={submitText}\n              title={submitTitle}\n              disabled={!isValid}\n              type={'submit'}\n            />\n          </div>\n\n          {errorMessage && (\n            <div className=\"ItemEditingForm__error-notification\">\n              <Notification text={errorMessage} errorStatus={true} />\n            </div>\n          )}\n        </>\n      )}\n    </Form>\n  );\n};\n","import React, {\n  useCallback,\n  useMemo,\n  useState,\n  MouseEventHandler,\n} from 'react';\nimport { observer } from 'mobx-react';\nimport { Formik } from 'formik';\n\nimport { EventInterface, FormValues } from '../../types';\nimport myEventStore from '../../store';\nimport { ItemEditingForm } from '../ItemEditiingForm';\n\nimport { validateEditingItemForm } from '../../helpers/FormHelper';\nimport {\n  getValidDateFormat,\n  getHtmlDateFormat,\n} from '../../helpers/dateHelper';\n\nimport './ItemEditing.scss';\n\ninterface Props {\n  event: EventInterface;\n  handleStatusEditing: MouseEventHandler<HTMLButtonElement>;\n}\n\nexport const ItemEditing = observer(({ event, handleStatusEditing }: Props) => {\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successEditing, setSuccessEditing] = useState(false);\n\n  const initialValues = useMemo(\n    () => ({\n      date: getHtmlDateFormat(event.date),\n      startTime: event.startTime,\n      endTime: event.endTime,\n    }),\n    [event]\n  );\n\n  const identityChecking = useCallback(\n    (values: FormValues): boolean =>\n      initialValues.date === values.date &&\n      initialValues.startTime === values.startTime &&\n      initialValues.endTime === values.endTime,\n    [initialValues.date, initialValues.endTime, initialValues.startTime]\n  );\n\n  const handleSubmit = useCallback(\n    (values) => {\n      const changedEvent: EventInterface = {\n        ...event,\n        date: getValidDateFormat(values.date),\n        startTime: values.startTime,\n        endTime: values.endTime,\n      };\n\n      const isTimeFree = myEventStore.defineIsTimeFree(\n        changedEvent.date,\n        changedEvent.startTime,\n        changedEvent.endTime,\n        changedEvent.id\n      );\n\n      if (identityChecking(values)) {\n        setErrorMessage('Ошибка! Данные не были изменены!');\n      } else if (!isTimeFree) {\n        setErrorMessage('Ошибка! Уже есть событие на указанное время!');\n      } else {\n        setErrorMessage('');\n        myEventStore.changeEvent(changedEvent);\n        setSuccessEditing(true);\n      }\n    },\n    [event, identityChecking]\n  );\n\n  return (\n    <Formik\n      initialValues={{ ...initialValues }}\n      validate={validateEditingItemForm}\n      onSubmit={handleSubmit}\n    >\n      {({ values, errors, touched, isValid }) => (\n        <ItemEditingForm\n          handleStatusEditing={handleStatusEditing}\n          errorMessage={errorMessage}\n          values={values}\n          errors={errors}\n          touched={touched}\n          isValid={isValid}\n          successEditing={successEditing}\n          eventTitle={event.title}\n        />\n      )}\n    </Formik>\n  );\n});\n","import React, { useState, useCallback } from 'react';\nimport { observer } from 'mobx-react';\n\nimport { EventInterface } from '../../types';\nimport myEventStore from '../../store';\nimport { ItemEditing } from '../ItemEditing';\nimport { HandlerButton } from '../HandlerButton';\n\nimport { makeCapitalFirstLetter } from '../../helpers/EventItemHelper';\nimport {\n  getHtmlDateFormat,\n  getDayForDisplay,\n  getMonthForDisplay,\n  getYearForDisplay,\n} from '../../helpers/dateHelper';\n\nimport './EventItem.scss';\n\nconst handlerEditingTitle = 'Изменить событие';\nconst handlerItemDeletingTitle = 'Удалить событие';\n\nexport const EventItem = observer(({ event }: { event: EventInterface }) => {\n  const [editingStatus, setStatusEditing] = useState(false);\n\n  const { title, date, startTime, endTime, id } = event;\n\n  const handleStatusEditing = useCallback(() => {\n    setStatusEditing((prevState) => !prevState);\n  }, [setStatusEditing]);\n\n  const onDeleteEvent = useCallback(() => {\n    myEventStore.deleteEvent(id);\n  }, [id]);\n\n  return (\n    <div className=\"EventItem\">\n      <time className=\"EventItem__date\" dateTime={getHtmlDateFormat(date)}>\n        <span className=\"EventItem__date-item\">{getDayForDisplay(date)}</span>\n        <span className=\"EventItem__date-item\">{getMonthForDisplay(date)}</span>\n        <span className=\"EventItem__date-item\">{getYearForDisplay(date)}</span>\n      </time>\n\n      <div className=\"EventItem__details-wrapper\">\n        <div className=\"EventItem__details\">\n          <h3 className=\"EventItem__title\">\n            <span>{makeCapitalFirstLetter(title)}</span>\n\n            <HandlerButton\n              handler={handleStatusEditing}\n              title={handlerEditingTitle}\n              whiteBackground={true}\n              buttonEdit={true}\n            />\n          </h3>\n\n          <div className=\"EventItem__additional-details-wrapper\">\n            <div className=\"EventItem__clock-icon\" />\n\n            <div className=\"EventItem__time-wrapper\">\n              <time\n                className=\"EventItem__time EventItem__time--start\"\n                dateTime={startTime}\n              >\n                {`${startTime} - `}\n              </time>\n\n              <time\n                className=\"EventItem__time EventItem__time--end\"\n                dateTime={endTime}\n              >\n                {endTime}\n              </time>\n            </div>\n          </div>\n\n          {editingStatus && (\n            <div className=\"EventItem__editing-form\">\n              <ItemEditing\n                event={event}\n                handleStatusEditing={handleStatusEditing}\n              />\n            </div>\n          )}\n        </div>\n\n        <HandlerButton\n          handler={onDeleteEvent}\n          title={handlerItemDeletingTitle}\n          whiteBackground={true}\n          buttonClose={true}\n        />\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nimport myEventStore from '../../store';\nimport { EventInterface } from '../../types';\nimport { EventItem } from '../EventItem';\n\nimport './EventsList.scss';\n\nexport const EventsList = observer(() => {\n  return (\n    <ul className=\"EventsList\">\n      {myEventStore\n        .eventsByAnyDate(myEventStore.getSelectedData)\n        .map((event: EventInterface) => (\n          <li className=\"EventsList__list-item\" key={event.id}>\n            <EventItem event={event} />\n          </li>\n        ))}\n    </ul>\n  );\n});\n","import React, { useCallback } from 'react';\nimport { observer } from 'mobx-react';\n\nimport myEventStore from '../../store';\n\nimport './SelectDate.scss';\n\nexport const SelectDate = observer(() => {\n  const setSelectedData = useCallback((event) => {\n    const value = event.target.value;\n\n    myEventStore.setSelectedData(value);\n    myEventStore.updateEventsDates(myEventStore.events);\n  }, []);\n\n  return (\n    <div className=\"SelectDate\">\n      <label htmlFor=\"select-date\" className=\"SelectDate__label\">\n        <h2 className=\"SelectDate__label-text\">Показать события по дате:</h2>\n\n        <select\n          id=\"select-date\"\n          className=\"SelectDate__select\"\n          name=\"select-date\"\n          value={myEventStore.getSelectedData}\n          onChange={setSelectedData}\n        >\n          <option value=\"\" disabled>\n            Выберите дату\n          </option>\n\n          {myEventStore.getEventsDatesList.map((eventDate: string) => (\n            <option value={eventDate} key={eventDate}>\n              {eventDate}\n            </option>\n          ))}\n        </select>\n      </label>\n    </div>\n  );\n});\n","import React from 'react';\n\nimport { AddEvent } from './components/AddEvent';\nimport { EventsList } from './components/EventsList';\nimport { SelectDate } from './components/SelectDate';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <h1 className=\"App__title\">Events</h1>\n      </header>\n\n      <main className=\"App__main\">\n        <section className=\"App__add-event-wrapper\">\n          <AddEvent />\n        </section>\n\n        <section className=\"App__events-list-wrapper\">\n          <div className=\"App__select-date-wrapper\">\n            <SelectDate />\n          </div>\n\n          <EventsList />\n        </section>\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}